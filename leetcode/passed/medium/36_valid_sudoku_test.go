package leetcode

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func isValidSudoku(board [][]byte) bool {
	rowCounting := [9][9]bool{}
	colCounting := [9][9]bool{}
	subGirdingCount := [9][9]bool{}

	for i, row := range board {
		for j, col := range row {
			if col != '.' {
				n := col - '0' - 1
				if rowCounting[i][n] {
					return false
				} else {
					rowCounting[i][n] = true
				}

				if colCounting[j][n] {
					return false
				} else {
					colCounting[j][n] = true
				}

				if subGirdingCount[i/3*3+j/3][n] {
					return false
				} else {
					subGirdingCount[i/3*3+j/3][n] = true
				}
			}
		}
	}

	return true
}

func TestValidSudoku(t *testing.T) {
	cases := []struct {
		Board    [][]byte
		Excepted bool
	}{
		{
			[][]byte{
				{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			true,
		},
		{
			[][]byte{
				{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			false,
		},
		{
			[][]byte{
				{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
				{'.', '4', '.', '3', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '3', '.', '.', '1'},
				{'8', '.', '.', '.', '.', '.', '.', '2', '.'},
				{'.', '.', '2', '.', '7', '.', '.', '.', '.'},
				{'.', '1', '5', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
				{'.', '2', '.', '9', '.', '.', '.', '.', '.'},
				{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
			},
			false,
		},
	}

	for _, c := range cases {
		t.Run("", func(t *testing.T) {
			ans := isValidSudoku(c.Board)
			assert.Equal(t, c.Excepted, ans)
		})
	}
}
